{"ast":null,"code":"import { JOIN_MISSION, LOAD_MISSIONS, LEAVE_MISSION } from '../../types';\nexport const URL = 'https://api.spacexdata.com/v3/missions';\nexport const joinMission = id => ({\n  type: JOIN_MISSION,\n  payload: id\n});\nexport const loadMissions = id => ({\n  type: LOAD_MISSIONS,\n  payload: id\n});\nexport const leaveMission = payload => ({\n  type: LEAVE_MISSION,\n  payload\n});\nexport const fetchAllMissions = async () => {\n  const response = await fetch(URL);\n  return response.json();\n};\nexport const missionsSelector = state => state.missions;\nexport const getMissions = () => async function getMissions(dispatch) {\n  const allMissions = await fetchAllMissions();\n  const missions = allMissions.map(mission => ({\n    id: mission.mission_id,\n    missionName: mission.mission_name,\n    description: mission.description,\n    wikipedia: mission.details\n  }));\n  dispatch(loadMissions(missions));\n};\nexport const newStateToJoinMission = (missions, id) => {\n  const newState = missions.map(mission => {\n    if (mission.mission_id !== id) {\n      return mission;\n    }\n\n    return { ...mission,\n      isReserved: true\n    };\n  });\n  return newState;\n};\nexport const newStateToLeaveMission = (missions, id) => {\n  const newState = missions.map(mission => {\n    if (mission.mission_id !== id) {\n      return mission;\n    }\n\n    return { ...mission,\n      isReserved: false\n    };\n  });\n  return newState;\n};\nexport default getMissions;","map":{"version":3,"sources":["/home/codepriest/Documents/microverse/space-travelers/src/store/reducers/actions/missionActions.js"],"names":["JOIN_MISSION","LOAD_MISSIONS","LEAVE_MISSION","URL","joinMission","id","type","payload","loadMissions","leaveMission","fetchAllMissions","response","fetch","json","missionsSelector","state","missions","getMissions","dispatch","allMissions","map","mission","mission_id","missionName","mission_name","description","wikipedia","details","newStateToJoinMission","newState","isReserved","newStateToLeaveMission"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,QAA2D,aAA3D;AAEA,OAAO,MAAMC,GAAG,GAAG,wCAAZ;AAEP,OAAO,MAAMC,WAAW,GAAIC,EAAD,KAAS;AAClCC,EAAAA,IAAI,EAAEN,YAD4B;AAElCO,EAAAA,OAAO,EAAEF;AAFyB,CAAT,CAApB;AAKP,OAAO,MAAMG,YAAY,GAAIH,EAAD,KAAS;AACnCC,EAAAA,IAAI,EAAEL,aAD6B;AAEnCM,EAAAA,OAAO,EAAEF;AAF0B,CAAT,CAArB;AAKP,OAAO,MAAMI,YAAY,GAAIF,OAAD,KAAc;AACxCD,EAAAA,IAAI,EAAEJ,aADkC;AAExCK,EAAAA;AAFwC,CAAd,CAArB;AAKP,OAAO,MAAMG,gBAAgB,GAAG,YAAY;AAC1C,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;AACA,SAAOQ,QAAQ,CAACE,IAAT,EAAP;AACD,CAHM;AAKP,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAWA,KAAK,CAACC,QAA1C;AAEP,OAAO,MAAMC,WAAW,GAAG,MAAM,eAAeA,WAAf,CAA2BC,QAA3B,EAAqC;AACpE,QAAMC,WAAW,GAAG,MAAMT,gBAAgB,EAA1C;AACA,QAAMM,QAAQ,GAAGG,WAAW,CAACC,GAAZ,CAAiBC,OAAD,KAAc;AAC7ChB,IAAAA,EAAE,EAAEgB,OAAO,CAACC,UADiC;AAE7CC,IAAAA,WAAW,EAAEF,OAAO,CAACG,YAFwB;AAG7CC,IAAAA,WAAW,EAAEJ,OAAO,CAACI,WAHwB;AAI7CC,IAAAA,SAAS,EAAEL,OAAO,CAACM;AAJ0B,GAAd,CAAhB,CAAjB;AAMAT,EAAAA,QAAQ,CAACV,YAAY,CAACQ,QAAD,CAAb,CAAR;AACD,CATM;AAUP,OAAO,MAAMY,qBAAqB,GAAG,CAACZ,QAAD,EAAWX,EAAX,KAAkB;AACrD,QAAMwB,QAAQ,GAAGb,QAAQ,CAACI,GAAT,CAAcC,OAAD,IAAa;AACzC,QAAIA,OAAO,CAACC,UAAR,KAAuBjB,EAA3B,EAA+B;AAC7B,aAAOgB,OAAP;AACD;;AACD,WAAO,EAAE,GAAGA,OAAL;AAAcS,MAAAA,UAAU,EAAE;AAA1B,KAAP;AACD,GALgB,CAAjB;AAMA,SAAOD,QAAP;AACD,CARM;AAUP,OAAO,MAAME,sBAAsB,GAAG,CAACf,QAAD,EAAWX,EAAX,KAAkB;AACtD,QAAMwB,QAAQ,GAAGb,QAAQ,CAACI,GAAT,CAAcC,OAAD,IAAa;AACzC,QAAIA,OAAO,CAACC,UAAR,KAAuBjB,EAA3B,EAA+B;AAC7B,aAAOgB,OAAP;AACD;;AACD,WAAO,EAAE,GAAGA,OAAL;AAAcS,MAAAA,UAAU,EAAE;AAA1B,KAAP;AACD,GALgB,CAAjB;AAMA,SAAOD,QAAP;AACD,CARM;AAUP,eAAeZ,WAAf","sourcesContent":["import { JOIN_MISSION, LOAD_MISSIONS, LEAVE_MISSION } from '../../types';\n\nexport const URL = 'https://api.spacexdata.com/v3/missions';\n\nexport const joinMission = (id) => ({\n  type: JOIN_MISSION,\n  payload: id,\n});\n\nexport const loadMissions = (id) => ({\n  type: LOAD_MISSIONS,\n  payload: id,\n});\n\nexport const leaveMission = (payload) => ({\n  type: LEAVE_MISSION,\n  payload,\n});\n\nexport const fetchAllMissions = async () => {\n  const response = await fetch(URL);\n  return response.json();\n};\n\nexport const missionsSelector = (state) => state.missions;\n\nexport const getMissions = () => async function getMissions(dispatch) {\n  const allMissions = await fetchAllMissions();\n  const missions = allMissions.map((mission) => ({\n    id: mission.mission_id,\n    missionName: mission.mission_name,\n    description: mission.description,\n    wikipedia: mission.details,\n  }));\n  dispatch(loadMissions(missions));\n};\nexport const newStateToJoinMission = (missions, id) => {\n  const newState = missions.map((mission) => {\n    if (mission.mission_id !== id) {\n      return mission;\n    }\n    return { ...mission, isReserved: true };\n  });\n  return newState;\n};\n\nexport const newStateToLeaveMission = (missions, id) => {\n  const newState = missions.map((mission) => {\n    if (mission.mission_id !== id) {\n      return mission;\n    }\n    return { ...mission, isReserved: false };\n  });\n  return newState;\n};\n\nexport default getMissions;\n"]},"metadata":{},"sourceType":"module"}