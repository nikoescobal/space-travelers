{"ast":null,"code":"import axios from 'axios';\nimport { GET_ROCKETS, SET_ROCKETS, ERROR_ROCKETS, SET_RESERVES, CANCEL_RESERVES } from '../../types';\nexport const getRocketsAction = () => async dispatch => {\n  const baseUrl = 'https://api.spacexdata.com/v3/rockets';\n\n  try {\n    dispatch({\n      type: GET_ROCKETS\n    });\n    const newRocketList = [];\n    const {\n      data\n    } = await axios.get(`${baseUrl}`);\n    data.map(item => {\n      const rocketObj = {\n        id: item.id,\n        rocket_name: item.rocket_name,\n        description: item.description,\n        flickr_images: item.flickr_images[0]\n      };\n      return newRocketList.push(rocketObj);\n    });\n    dispatch({\n      type: SET_ROCKETS,\n      payload: newRocketList\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_ROCKETS,\n      payload: error.message\n    });\n  }\n};\nexport const setReserveAction = rocketId => dispatch => {\n  try {\n    dispatch({\n      type: SET_RESERVES,\n      payload: rocketId\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_ROCKETS,\n      payload: error.message\n    });\n  }\n};\nexport const cancelReservationAction = rocketId => dispatch => {\n  try {\n    dispatch({\n      type: CANCEL_RESERVES,\n      payload: rocketId\n    });\n  } catch (error) {\n    dispatch({\n      type: ERROR_ROCKETS,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/codepriest/Documents/microverse/space-travelers/src/store/reducers/actions/rocketActions.js"],"names":["axios","GET_ROCKETS","SET_ROCKETS","ERROR_ROCKETS","SET_RESERVES","CANCEL_RESERVES","getRocketsAction","dispatch","baseUrl","type","newRocketList","data","get","map","item","rocketObj","id","rocket_name","description","flickr_images","push","payload","error","message","setReserveAction","rocketId","cancelReservationAction"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,YAJF,EAKEC,eALF,QAMO,aANP;AAQA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACxD,QAAMC,OAAO,GAAG,uCAAhB;;AACA,MAAI;AACFD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR;AACA,UAAMS,aAAa,GAAG,EAAtB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMX,KAAK,CAACY,GAAN,CAAW,GAAEJ,OAAQ,EAArB,CAAvB;AACAG,IAAAA,IAAI,CAACE,GAAL,CAAUC,IAAD,IAAU;AACjB,YAAMC,SAAS,GAAG;AAChBC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EADO;AAEhBC,QAAAA,WAAW,EAAEH,IAAI,CAACG,WAFF;AAGhBC,QAAAA,WAAW,EAAEJ,IAAI,CAACI,WAHF;AAIhBC,QAAAA,aAAa,EAAEL,IAAI,CAACK,aAAL,CAAmB,CAAnB;AAJC,OAAlB;AAMA,aAAOT,aAAa,CAACU,IAAd,CAAmBL,SAAnB,CAAP;AACD,KARD;AASAR,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEP,WAAR;AAAqBmB,MAAAA,OAAO,EAAEX;AAA9B,KAAD,CAAR;AACD,GAdD,CAcE,OAAOY,KAAP,EAAc;AACdf,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEN,aAAR;AAAuBkB,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAtC,KAAD,CAAR;AACD;AACF,CAnBM;AAqBP,OAAO,MAAMC,gBAAgB,GAAIC,QAAD,IAAelB,QAAD,IAAc;AAC1D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEL,YAAR;AAAsBiB,MAAAA,OAAO,EAAEI;AAA/B,KAAD,CAAR;AACD,GAFD,CAEE,OAAOH,KAAP,EAAc;AACdf,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEN,aAAR;AAAuBkB,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAtC,KAAD,CAAR;AACD;AACF,CANM;AAQP,OAAO,MAAMG,uBAAuB,GAAID,QAAD,IAAelB,QAAD,IAAc;AACjE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEJ,eAAR;AAAyBgB,MAAAA,OAAO,EAAEI;AAAlC,KAAD,CAAR;AACD,GAFD,CAEE,OAAOH,KAAP,EAAc;AACdf,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEN,aAAR;AAAuBkB,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAtC,KAAD,CAAR;AACD;AACF,CANM","sourcesContent":["import axios from 'axios';\nimport {\n  GET_ROCKETS,\n  SET_ROCKETS,\n  ERROR_ROCKETS,\n  SET_RESERVES,\n  CANCEL_RESERVES,\n} from '../../types';\n\nexport const getRocketsAction = () => async (dispatch) => {\n  const baseUrl = 'https://api.spacexdata.com/v3/rockets';\n  try {\n    dispatch({ type: GET_ROCKETS });\n    const newRocketList = [];\n    const { data } = await axios.get(`${baseUrl}`);\n    data.map((item) => {\n      const rocketObj = {\n        id: item.id,\n        rocket_name: item.rocket_name,\n        description: item.description,\n        flickr_images: item.flickr_images[0],\n      };\n      return newRocketList.push(rocketObj);\n    });\n    dispatch({ type: SET_ROCKETS, payload: newRocketList });\n  } catch (error) {\n    dispatch({ type: ERROR_ROCKETS, payload: error.message });\n  }\n};\n\nexport const setReserveAction = (rocketId) => (dispatch) => {\n  try {\n    dispatch({ type: SET_RESERVES, payload: rocketId });\n  } catch (error) {\n    dispatch({ type: ERROR_ROCKETS, payload: error.message });\n  }\n};\n\nexport const cancelReservationAction = (rocketId) => (dispatch) => {\n  try {\n    dispatch({ type: CANCEL_RESERVES, payload: rocketId });\n  } catch (error) {\n    dispatch({ type: ERROR_ROCKETS, payload: error.message });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}