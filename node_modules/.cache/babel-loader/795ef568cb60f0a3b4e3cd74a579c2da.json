{"ast":null,"code":"import { JOIN_MISSION, LOAD_MISSIONS, LEAVE_MISSION } from \"../../types\";\nconst URL = \"https://api.spacexdata.com/v3/missions\";\nexport const joinMission = id => ({\n  type: JOIN_MISSION,\n  payload: id\n});\nexport const loadMissions = id => ({\n  type: LOAD_MISSIONS,\n  payload: id\n});\nexport const leaveMission = payload => ({\n  type: LEAVE_MISSION,\n  payload\n});\nexport const fetchAllMissions = async () => {\n  const response = await fetch(URL);\n  return response.json();\n};\nexport const missionsSelector = state => state.missions;\nexport const newStateToJoinMission = (missions, id) => {\n  const newState = missions.map(mission => {\n    if (mission.mission_id !== id) {\n      return mission;\n    }\n\n    return { ...mission,\n      isReserved: true\n    };\n  });\n  return newState;\n};\nexport const newStateToLeaveMission = (missions, id) => {\n  const newState = missions.map(mission => {\n    if (mission.mission_id !== id) {\n      return mission;\n    }\n\n    return { ...mission,\n      isReserved: false\n    };\n  });\n  return newState;\n};\nexport const getMissions = () => async dispatch => {\n  const response = await fetch(URL);\n  const data = await response.json();\n  const missionArr = [];\n  data.forEach(m => {\n    const mission = {\n      mission_id: m.mission_id,\n      mission_name: m.mission_name,\n      mission_description: m.description\n    };\n    missionArr.push(mission);\n  });\n  dispatch(loadMissions(missionArr));\n};\nexport default getMissions;","map":{"version":3,"sources":["/home/codepriest/Documents/microverse/space-travelers/src/store/reducers/actions/missionActions.js"],"names":["JOIN_MISSION","LOAD_MISSIONS","LEAVE_MISSION","URL","joinMission","id","type","payload","loadMissions","leaveMission","fetchAllMissions","response","fetch","json","missionsSelector","state","missions","newStateToJoinMission","newState","map","mission","mission_id","isReserved","newStateToLeaveMission","getMissions","dispatch","data","missionArr","forEach","m","mission_name","mission_description","description","push"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,QAA2D,aAA3D;AAEA,MAAMC,GAAG,GAAG,wCAAZ;AAEA,OAAO,MAAMC,WAAW,GAAIC,EAAD,KAAS;AAClCC,EAAAA,IAAI,EAAEN,YAD4B;AAElCO,EAAAA,OAAO,EAAEF;AAFyB,CAAT,CAApB;AAKP,OAAO,MAAMG,YAAY,GAAIH,EAAD,KAAS;AACnCC,EAAAA,IAAI,EAAEL,aAD6B;AAEnCM,EAAAA,OAAO,EAAEF;AAF0B,CAAT,CAArB;AAIP,OAAO,MAAMI,YAAY,GAAIF,OAAD,KAAc;AACxCD,EAAAA,IAAI,EAAEJ,aADkC;AAExCK,EAAAA;AAFwC,CAAd,CAArB;AAKP,OAAO,MAAMG,gBAAgB,GAAG,YAAY;AAC1C,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;AACA,SAAOQ,QAAQ,CAACE,IAAT,EAAP;AACD,CAHM;AAKP,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAWA,KAAK,CAACC,QAA1C;AAEP,OAAO,MAAMC,qBAAqB,GAAG,CAACD,QAAD,EAAWX,EAAX,KAAkB;AACrD,QAAMa,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CAAcC,OAAD,IAAa;AACzC,QAAIA,OAAO,CAACC,UAAR,KAAuBhB,EAA3B,EAA+B;AAC7B,aAAOe,OAAP;AACD;;AACD,WAAO,EAAE,GAAGA,OAAL;AAAcE,MAAAA,UAAU,EAAE;AAA1B,KAAP;AACD,GALgB,CAAjB;AAMA,SAAOJ,QAAP;AACD,CARM;AAUP,OAAO,MAAMK,sBAAsB,GAAG,CAACP,QAAD,EAAWX,EAAX,KAAkB;AACtD,QAAMa,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CAAcC,OAAD,IAAa;AACzC,QAAIA,OAAO,CAACC,UAAR,KAAuBhB,EAA3B,EAA+B;AAC7B,aAAOe,OAAP;AACD;;AACD,WAAO,EAAE,GAAGA,OAAL;AAAcE,MAAAA,UAAU,EAAE;AAA1B,KAAP;AACD,GALgB,CAAjB;AAMA,SAAOJ,QAAP;AACD,CARM;AAUP,OAAO,MAAMM,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACnD,QAAMd,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;AACA,QAAMuB,IAAI,GAAG,MAAMf,QAAQ,CAACE,IAAT,EAAnB;AACA,QAAMc,UAAU,GAAG,EAAnB;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,CAAD,IAAO;AAClB,UAAMT,OAAO,GAAG;AACdC,MAAAA,UAAU,EAAEQ,CAAC,CAACR,UADA;AAEdS,MAAAA,YAAY,EAAED,CAAC,CAACC,YAFF;AAGdC,MAAAA,mBAAmB,EAAEF,CAAC,CAACG;AAHT,KAAhB;AAKAL,IAAAA,UAAU,CAACM,IAAX,CAAgBb,OAAhB;AACD,GAPD;AAQAK,EAAAA,QAAQ,CAACjB,YAAY,CAACmB,UAAD,CAAb,CAAR;AACD,CAbM;AAeP,eAAeH,WAAf","sourcesContent":["import { JOIN_MISSION, LOAD_MISSIONS, LEAVE_MISSION } from \"../../types\";\n\nconst URL = \"https://api.spacexdata.com/v3/missions\";\n\nexport const joinMission = (id) => ({\n  type: JOIN_MISSION,\n  payload: id,\n});\n\nexport const loadMissions = (id) => ({\n  type: LOAD_MISSIONS,\n  payload: id,\n});\nexport const leaveMission = (payload) => ({\n  type: LEAVE_MISSION,\n  payload,\n});\n\nexport const fetchAllMissions = async () => {\n  const response = await fetch(URL);\n  return response.json();\n};\n\nexport const missionsSelector = (state) => state.missions;\n\nexport const newStateToJoinMission = (missions, id) => {\n  const newState = missions.map((mission) => {\n    if (mission.mission_id !== id) {\n      return mission;\n    }\n    return { ...mission, isReserved: true };\n  });\n  return newState;\n};\n\nexport const newStateToLeaveMission = (missions, id) => {\n  const newState = missions.map((mission) => {\n    if (mission.mission_id !== id) {\n      return mission;\n    }\n    return { ...mission, isReserved: false };\n  });\n  return newState;\n};\n\nexport const getMissions = () => async (dispatch) => {\n  const response = await fetch(URL);\n  const data = await response.json();\n  const missionArr = [];\n  data.forEach((m) => {\n    const mission = {\n      mission_id: m.mission_id,\n      mission_name: m.mission_name,\n      mission_description: m.description,\n    };\n    missionArr.push(mission);\n  });\n  dispatch(loadMissions(missionArr));\n};\n\nexport default getMissions;\n"]},"metadata":{},"sourceType":"module"}